# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6198, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Connectivitycollection(msrest.serialization.Model):
    """The collection of Connectivity related groups and policies within the Managed Network.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar groups: The collection of connectivity related Managed Network Groups within the Managed
     Network.
    :vartype groups: list[~managed_network_management_client.models.Managednetworkgroup]
    :ivar peerings: The collection of Managed Network Peering Policies within the Managed Network.
    :vartype peerings: list[~managed_network_management_client.models.Managednetworkpeeringpolicy]
    """

    _validation = {
        'groups': {'readonly': True},
        'peerings': {'readonly': True},
    }

    _attribute_map = {
        'groups': {'key': 'groups', 'type': '[Managednetworkgroup]'},
        'peerings': {'key': 'peerings', 'type': '[Managednetworkpeeringpolicy]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Connectivitycollection, self).__init__(**kwargs)
        self.groups = None
        self.peerings = None


class ErrorresponseException(HttpResponseError):
    """Server responded with exception of type: 'Errorresponse'.

    :param response: Server response to be deserialized.
    :param error_model: A deserialized model of the response body as model.
    """

    def __init__(self, response, error_model):
        self.error = error_model
        super(ErrorresponseException, self).__init__(response=response, error_model=error_model)

    @classmethod
    def from_response(cls, response, deserialize):
        """Deserialize this response as this exception, or a subclass of this exception.

        :param response: Server response to be deserialized.
        :param deserialize: A deserializer
        """
        model_name = 'Errorresponse'
        error = deserialize(model_name, response)
        if error is None:
            error = deserialize.dependencies[model_name]()
        return error._EXCEPTION_TYPE(response, error)


class Errorresponse(msrest.serialization.Model):
    """The error response that indicates why an operation has failed.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    """
    _EXCEPTION_TYPE = ErrorresponseException

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Errorresponse, self).__init__(**kwargs)
        self.code = None
        self.message = None


class Resourceproperties(msrest.serialization.Model):
    """Base for resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    """

    _validation = {
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'provisioningstate': {'key': 'provisioningState', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resourceproperties, self).__init__(**kwargs)
        self.provisioningstate = None
        self.etag = None


class Managednetworkpeeringpolicyproperties(Resourceproperties):
    """Properties of a Managed Network Peering Policy.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: Hubandspokepeeringpolicyproperties, Meshpeeringpolicyproperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param type: Required. Gets or sets the connectivity type of a network structure
     policy.Constant filled by server.  Possible values include: 'HubAndSpokeTopology',
     'MeshTopology'.
    :type type: str or ~managed_network_management_client.models.Type
    :param hub: Generic pointer to a resource.
    :type hub: ~managed_network_management_client.models.Resourceid
    :param spokes: Gets or sets the spokes group IDs.
    :type spokes: list[~managed_network_management_client.models.Resourceid]
    :param mesh: Gets or sets the mesh group IDs.
    :type mesh: list[~managed_network_management_client.models.Resourceid]
    """

    _validation = {
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'provisioningstate': {'key': 'provisioningState', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'hub': {'key': 'hub', 'type': 'Resourceid'},
        'spokes': {'key': 'spokes', 'type': '[Resourceid]'},
        'mesh': {'key': 'mesh', 'type': '[Resourceid]'},
    }

    _subtype_map = {
        'type': {'HubAndSpokeTopology': 'Hubandspokepeeringpolicyproperties', 'MeshTopology': 'Meshpeeringpolicyproperties'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworkpeeringpolicyproperties, self).__init__(**kwargs)
        self.type = 'ManagedNetworkPeeringPolicyProperties'
        self.hub = kwargs.get('hub', None)
        self.spokes = kwargs.get('spokes', None)
        self.mesh = kwargs.get('mesh', None)


class Hubandspokepeeringpolicyproperties(Managednetworkpeeringpolicyproperties):
    """Properties of a Hub and Spoke Peering Policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param type: Required. Gets or sets the connectivity type of a network structure
     policy.Constant filled by server.  Possible values include: 'HubAndSpokeTopology',
     'MeshTopology'.
    :type type: str or ~managed_network_management_client.models.Type
    :param hub: Generic pointer to a resource.
    :type hub: ~managed_network_management_client.models.Resourceid
    :param spokes: Gets or sets the spokes group IDs.
    :type spokes: list[~managed_network_management_client.models.Resourceid]
    :param mesh: Gets or sets the mesh group IDs.
    :type mesh: list[~managed_network_management_client.models.Resourceid]
    """

    _validation = {
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'provisioningstate': {'key': 'provisioningState', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'hub': {'key': 'hub', 'type': 'Resourceid'},
        'spokes': {'key': 'spokes', 'type': '[Resourceid]'},
        'mesh': {'key': 'mesh', 'type': '[Resourceid]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Hubandspokepeeringpolicyproperties, self).__init__(**kwargs)
        self.type = 'HubAndSpokeTopology'


class Resource(msrest.serialization.Model):
    """The general resource model definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)


class Trackedresource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: The geo-location where the resource lives.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Trackedresource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class Managednetwork(Trackedresource):
    """The Managed Network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: The geo-location where the resource lives.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar groups: The collection of connectivity related Managed Network Groups within the Managed
     Network.
    :vartype groups: list[~managed_network_management_client.models.Managednetworkgroup]
    :ivar peerings: The collection of Managed Network Peering Policies within the Managed Network.
    :vartype peerings: list[~managed_network_management_client.models.Managednetworkpeeringpolicy]
    :param managementgroups: The collection of management groups covered by the Managed Network.
    :type managementgroups: list[~managed_network_management_client.models.Resourceid]
    :param subscriptions: The collection of subscriptions covered by the Managed Network.
    :type subscriptions: list[~managed_network_management_client.models.Resourceid]
    :param virtualnetworks: The collection of virtual nets covered by the Managed Network.
    :type virtualnetworks: list[~managed_network_management_client.models.Resourceid]
    :param subnets: The collection of  subnets covered by the Managed Network.
    :type subnets: list[~managed_network_management_client.models.Resourceid]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
        'groups': {'readonly': True},
        'peerings': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'provisioningstate': {'key': 'properties.provisioningState', 'type': 'str'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
        'groups': {'key': 'properties.connectivity.groups', 'type': '[Managednetworkgroup]'},
        'peerings': {'key': 'properties.connectivity.peerings', 'type': '[Managednetworkpeeringpolicy]'},
        'managementgroups': {'key': 'properties.scope.managementGroups', 'type': '[Resourceid]'},
        'subscriptions': {'key': 'properties.scope.subscriptions', 'type': '[Resourceid]'},
        'virtualnetworks': {'key': 'properties.scope.virtualNetworks', 'type': '[Resourceid]'},
        'subnets': {'key': 'properties.scope.subnets', 'type': '[Resourceid]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetwork, self).__init__(**kwargs)
        self.provisioningstate = None
        self.etag = None
        self.groups = None
        self.peerings = None
        self.managementgroups = kwargs.get('managementgroups', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.virtualnetworks = kwargs.get('virtualnetworks', None)
        self.subnets = kwargs.get('subnets', None)


class Proxyresource(Resource):
    """The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Proxyresource, self).__init__(**kwargs)


class Managednetworkgroup(Proxyresource):
    """The Managed Network Group resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: The geo-location where the resource lives.
    :type location: str
    :ivar kind: Responsibility role under which this Managed Network Group will be created. Default
     value: "Connectivity".
    :vartype kind: str
    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param managementgroups: The collection of management groups covered by the Managed Network.
    :type managementgroups: list[~managed_network_management_client.models.Resourceid]
    :param subscriptions: The collection of subscriptions covered by the Managed Network.
    :type subscriptions: list[~managed_network_management_client.models.Resourceid]
    :param virtualnetworks: The collection of virtual nets covered by the Managed Network.
    :type virtualnetworks: list[~managed_network_management_client.models.Resourceid]
    :param subnets: The collection of  subnets covered by the Managed Network.
    :type subnets: list[~managed_network_management_client.models.Resourceid]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'constant': True},
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'provisioningstate': {'key': 'properties.provisioningState', 'type': 'str'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
        'managementgroups': {'key': 'properties.managementGroups', 'type': '[Resourceid]'},
        'subscriptions': {'key': 'properties.subscriptions', 'type': '[Resourceid]'},
        'virtualnetworks': {'key': 'properties.virtualNetworks', 'type': '[Resourceid]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Resourceid]'},
    }

    kind = "Connectivity"

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworkgroup, self).__init__(**kwargs)
        self.provisioningstate = None
        self.etag = None
        self.managementgroups = kwargs.get('managementgroups', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.virtualnetworks = kwargs.get('virtualnetworks', None)
        self.subnets = kwargs.get('subnets', None)


class Managednetworkgrouplistresult(msrest.serialization.Model):
    """Result of the request to list Managed Network Groups. It contains a list of groups and a URL link to get the next set of results.

    :param value: Gets a page of ManagedNetworkGroup.
    :type value: list[~managed_network_management_client.models.Managednetworkgroup]
    :param nextlink: Gets the URL to get the next set of results.
    :type nextlink: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Managednetworkgroup]'},
        'nextlink': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworkgrouplistresult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.nextlink = kwargs.get('nextlink', None)


class Managednetworkgroupproperties(Resourceproperties):
    """Properties of a Managed Network Group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param managementgroups: The collection of management groups covered by the Managed Network.
    :type managementgroups: list[~managed_network_management_client.models.Resourceid]
    :param subscriptions: The collection of subscriptions covered by the Managed Network.
    :type subscriptions: list[~managed_network_management_client.models.Resourceid]
    :param virtualnetworks: The collection of virtual nets covered by the Managed Network.
    :type virtualnetworks: list[~managed_network_management_client.models.Resourceid]
    :param subnets: The collection of  subnets covered by the Managed Network.
    :type subnets: list[~managed_network_management_client.models.Resourceid]
    """

    _validation = {
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'provisioningstate': {'key': 'provisioningState', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'managementgroups': {'key': 'managementGroups', 'type': '[Resourceid]'},
        'subscriptions': {'key': 'subscriptions', 'type': '[Resourceid]'},
        'virtualnetworks': {'key': 'virtualNetworks', 'type': '[Resourceid]'},
        'subnets': {'key': 'subnets', 'type': '[Resourceid]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworkgroupproperties, self).__init__(**kwargs)
        self.managementgroups = kwargs.get('managementgroups', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.virtualnetworks = kwargs.get('virtualnetworks', None)
        self.subnets = kwargs.get('subnets', None)


class Managednetworklistresult(msrest.serialization.Model):
    """Result of the request to list Managed Network. It contains a list of Managed Networks and a URL link to get the next set of results.

    :param value: Gets a page of ManagedNetworks.
    :type value: list[~managed_network_management_client.models.Managednetwork]
    :param nextlink: Gets the URL to get the next page of results.
    :type nextlink: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Managednetwork]'},
        'nextlink': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworklistresult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.nextlink = kwargs.get('nextlink', None)


class Managednetworkpeeringpolicy(Proxyresource):
    """The Managed Network Peering Policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: The geo-location where the resource lives.
    :type location: str
    :param properties: Properties of a Managed Network Peering Policy.
    :type properties:
     ~managed_network_management_client.models.Managednetworkpeeringpolicyproperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'Managednetworkpeeringpolicyproperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworkpeeringpolicy, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class Managednetworkpeeringpolicylistresult(msrest.serialization.Model):
    """Result of the request to list Managed Network Peering Policies. It contains a list of policies and a URL link to get the next set of results.

    :param value: Gets a page of Peering Policies.
    :type value: list[~managed_network_management_client.models.Managednetworkpeeringpolicy]
    :param nextlink: Gets the URL to get the next page of results.
    :type nextlink: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Managednetworkpeeringpolicy]'},
        'nextlink': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworkpeeringpolicylistresult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.nextlink = kwargs.get('nextlink', None)


class Managednetworkproperties(Resourceproperties):
    """Properties of Managed Network.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar groups: The collection of connectivity related Managed Network Groups within the Managed
     Network.
    :vartype groups: list[~managed_network_management_client.models.Managednetworkgroup]
    :ivar peerings: The collection of Managed Network Peering Policies within the Managed Network.
    :vartype peerings: list[~managed_network_management_client.models.Managednetworkpeeringpolicy]
    :param managementgroups: The collection of management groups covered by the Managed Network.
    :type managementgroups: list[~managed_network_management_client.models.Resourceid]
    :param subscriptions: The collection of subscriptions covered by the Managed Network.
    :type subscriptions: list[~managed_network_management_client.models.Resourceid]
    :param virtualnetworks: The collection of virtual nets covered by the Managed Network.
    :type virtualnetworks: list[~managed_network_management_client.models.Resourceid]
    :param subnets: The collection of  subnets covered by the Managed Network.
    :type subnets: list[~managed_network_management_client.models.Resourceid]
    """

    _validation = {
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
        'groups': {'readonly': True},
        'peerings': {'readonly': True},
    }

    _attribute_map = {
        'provisioningstate': {'key': 'provisioningState', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'groups': {'key': 'connectivity.groups', 'type': '[Managednetworkgroup]'},
        'peerings': {'key': 'connectivity.peerings', 'type': '[Managednetworkpeeringpolicy]'},
        'managementgroups': {'key': 'scope.managementGroups', 'type': '[Resourceid]'},
        'subscriptions': {'key': 'scope.subscriptions', 'type': '[Resourceid]'},
        'virtualnetworks': {'key': 'scope.virtualNetworks', 'type': '[Resourceid]'},
        'subnets': {'key': 'scope.subnets', 'type': '[Resourceid]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworkproperties, self).__init__(**kwargs)
        self.groups = None
        self.peerings = None
        self.managementgroups = kwargs.get('managementgroups', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.virtualnetworks = kwargs.get('virtualnetworks', None)
        self.subnets = kwargs.get('subnets', None)


class Managednetworkupdate(msrest.serialization.Model):
    """Update Tags of Managed Network.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Managednetworkupdate, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class Meshpeeringpolicyproperties(Managednetworkpeeringpolicyproperties):
    """Properties of a Mesh Peering Policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param type: Required. Gets or sets the connectivity type of a network structure
     policy.Constant filled by server.  Possible values include: 'HubAndSpokeTopology',
     'MeshTopology'.
    :type type: str or ~managed_network_management_client.models.Type
    :param hub: Generic pointer to a resource.
    :type hub: ~managed_network_management_client.models.Resourceid
    :param spokes: Gets or sets the spokes group IDs.
    :type spokes: list[~managed_network_management_client.models.Resourceid]
    :param mesh: Gets or sets the mesh group IDs.
    :type mesh: list[~managed_network_management_client.models.Resourceid]
    """

    _validation = {
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'provisioningstate': {'key': 'provisioningState', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'hub': {'key': 'hub', 'type': 'Resourceid'},
        'spokes': {'key': 'spokes', 'type': '[Resourceid]'},
        'mesh': {'key': 'mesh', 'type': '[Resourceid]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Meshpeeringpolicyproperties, self).__init__(**kwargs)
        self.type = 'MeshTopology'


class Operation(msrest.serialization.Model):
    """REST API operation.

    :param name: Operation name: {provider}/{resource}/{operation}.
    :type name: str
    :param display: The object that represents the operation.
    :type display: ~managed_network_management_client.models.OperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)


class OperationDisplay(msrest.serialization.Model):
    """The object that represents the operation.

    :param provider: Service provider: Microsoft.ManagedNetwork.
    :type provider: str
    :param resource: Resource on which the operation is performed: Profile, endpoint, etc.
    :type resource: str
    :param operation: Operation type: Read, write, delete, etc.
    :type operation: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)


class Operationlistresult(msrest.serialization.Model):
    """Result of the request to list Managed Network operations. It contains a list of operations and a URL link to get the next set of results.

    :param value: List of Resource Provider operations supported by the Managed Network resource
     provider.
    :type value: list[~managed_network_management_client.models.Operation]
    :param nextlink: URL to get the next set of operation list results if there are any.
    :type nextlink: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'nextlink': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Operationlistresult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.nextlink = kwargs.get('nextlink', None)


class Resourceid(msrest.serialization.Model):
    """Generic pointer to a resource.

    :param id: Resource Id.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resourceid, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class Scope(msrest.serialization.Model):
    """Scope of a Managed Network.

    :param managementgroups: The collection of management groups covered by the Managed Network.
    :type managementgroups: list[~managed_network_management_client.models.Resourceid]
    :param subscriptions: The collection of subscriptions covered by the Managed Network.
    :type subscriptions: list[~managed_network_management_client.models.Resourceid]
    :param virtualnetworks: The collection of virtual nets covered by the Managed Network.
    :type virtualnetworks: list[~managed_network_management_client.models.Resourceid]
    :param subnets: The collection of  subnets covered by the Managed Network.
    :type subnets: list[~managed_network_management_client.models.Resourceid]
    """

    _attribute_map = {
        'managementgroups': {'key': 'managementGroups', 'type': '[Resourceid]'},
        'subscriptions': {'key': 'subscriptions', 'type': '[Resourceid]'},
        'virtualnetworks': {'key': 'virtualNetworks', 'type': '[Resourceid]'},
        'subnets': {'key': 'subnets', 'type': '[Resourceid]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Scope, self).__init__(**kwargs)
        self.managementgroups = kwargs.get('managementgroups', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.virtualnetworks = kwargs.get('virtualnetworks', None)
        self.subnets = kwargs.get('subnets', None)


class Scopeassignment(Proxyresource):
    """The Managed Network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: The geo-location where the resource lives.
    :type location: str
    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param assignedmanagednetwork: The managed network ID with scope will be assigned to.
    :type assignedmanagednetwork: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'provisioningstate': {'key': 'properties.provisioningState', 'type': 'str'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
        'assignedmanagednetwork': {'key': 'properties.assignedManagedNetwork', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Scopeassignment, self).__init__(**kwargs)
        self.provisioningstate = None
        self.etag = None
        self.assignedmanagednetwork = kwargs.get('assignedmanagednetwork', None)


class Scopeassignmentlistresult(msrest.serialization.Model):
    """Result of the request to list ScopeAssignment. It contains a list of groups and a URL link to get the next set of results.

    :param value: Gets a page of ScopeAssignment.
    :type value: list[~managed_network_management_client.models.Scopeassignment]
    :param nextlink: Gets the URL to get the next set of results.
    :type nextlink: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Scopeassignment]'},
        'nextlink': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Scopeassignmentlistresult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.nextlink = kwargs.get('nextlink', None)


class Scopeassignmentproperties(Resourceproperties):
    """Properties of Managed Network.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioningstate: Provisioning state of the ManagedNetwork resource. Possible values
     include: 'Updating', 'Deleting', 'Failed', 'Succeeded'.
    :vartype provisioningstate: str or ~managed_network_management_client.models.Provisioningstate
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param assignedmanagednetwork: The managed network ID with scope will be assigned to.
    :type assignedmanagednetwork: str
    """

    _validation = {
        'provisioningstate': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'provisioningstate': {'key': 'provisioningState', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'assignedmanagednetwork': {'key': 'assignedManagedNetwork', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Scopeassignmentproperties, self).__init__(**kwargs)
        self.assignedmanagednetwork = kwargs.get('assignedmanagednetwork', None)
